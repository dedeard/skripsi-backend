generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  permissions String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User[]
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  roleId    Int?
  role      Role?    @relation(fields: [roleId], references: [id], onDelete: SetNull)
  field     Field?   @relation(fields: [fieldId], references: [id], onDelete: SetNull)
  fieldId   Int?
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Field {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  albums    Album[]
}

model Album {
  id          Int      @id @default(autoincrement())
  field       Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId     Int
  name        String
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  media       Media[]
}

model Media {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  type         String
  size         Int
  originalName String
  albumId      Int
  album        Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
